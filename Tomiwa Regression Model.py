# -*- coding: utf-8 -*-
"""Multiple Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l2mfQjsF-wrhcq2rDHBWahXdJifRe4A1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error , mean_absolute_error
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

cars = pd.read_csv("/content/CarPrice_Assignment.csv")
cars.head()

cars.describe()

cars.info()

cars.isnull().sum()

#check duplicate values
cars_dup=cars.duplicated().any()
cars_dup

for col in cars.columns:
    print(col, ":",cars[col].nunique())
    print(cars[col].value_counts().nlargest(5))
    print('\n' + '*' * 20 + '\n')

#Convert all strings to the same format
string_columns=list(cars.dtypes[cars.dtypes=='object'].index)
for col in string_columns:
    cars[col]=cars[col].str.lower().str.replace(' ','_')
    cars[col]=cars[col].str.lower().str.replace('-','_')

plt.figure(figsize=(15,7))
sns.histplot(cars.price,bins=40)

cars.price.skew()

# Scatterplot matrix
sns.set()
sns.pairplot(cars, x_vars=['wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginesize', 'boreratio', 'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg'], y_vars=['price'], height=7, aspect=0.7, kind='reg')
plt.show()

plt.figure(figsize=(20,20))
sns.heatmap(cars.corr() , annot=True);

# What's the average price of cars in dataset?
cars.CarName.value_counts()

cars.groupby('CarName').mean()['price']

cars[cars['horsepower']<=100]['price'].mean()

cars[cars['horsepower']>=100]['price'].mean()

#Build and train the multiple lionear regresssion model
##Check duplicate values

cars_dup=cars.duplicated().any()
cars_dup

cars.groupby('curbweight')['price'].mean()

#Evaluating Model using the Mean Squared Error and R-squared score
#Make all string same format
for col in string_columns:
    cars[col]=cars[col].str.lower().str.replace(' ','_')
    cars[col]=cars[col].str.lower().str.replace('-','_')

plt.figure(figsize=(15,7))
sns.histplot(cars.price,bins=40)

cars.price.skew()

#Checking categorical columns 
string_columns

plt.figure(figsize=(20,20))
sns.heatmap(cars.corr() , annot=True);

#To find average price of cars in dataset
cars.CarName.value_counts()

columns=['wheelbase','curbweight','boreratio','carwidth','carlength','enginesize']
plt.figure(figsize=(20, 15))
i=0
for col in columns:
    i=i+1
    plt.subplot(2,3,i)
    sns.regplot(x = col, y = 'price', data = cars)
plt.show()

plt.figure(figsize=(20, 20))
columns=['doornumber','fueltype','aspiration','carbody','enginelocation','drivewheel','enginetype','cylindernumber','fuelsystem']
i=0
for col in columns:
    i=i+1
    plt.subplot(3,3,i)
    sns.boxplot(x = col, y = 'price', data = cars)
plt.show()

#Conver important categorical data into numerica;l
fueltype_le=LabelEncoder()
cars['fueltype']= fueltype_le.fit_transform(cars.fueltype)
enginelocation_le=LabelEncoder()
cars['enginelocation']=enginelocation_le.fit_transform(cars.enginelocation)
cylindernumber_le=LabelEncoder()
cars['cylindernumber']=cylindernumber_le.fit_transform(cars.cylindernumber)
enginetype_le=LabelEncoder()
cars['enginetype']=enginetype_le.fit_transform(cars.enginetype)
carbody_le=LabelEncoder()
cars['carbody']=carbody_le.fit_transform(cars.carbody)
aspiration_le=LabelEncoder()
cars['aspiration']=aspiration_le.fit_transform(cars.aspiration)

cars.columns

#Model building

#Splitting dataset into Training set and Test set
X=cars.drop(["car_ID","CarName","doornumber","drivewheel","enginelocation","fuelsystem","symboling",
           'compressionratio','peakrpm','citympg','highwaympg','carheight','stroke'],axis=1)
y=cars['price']
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3,shuffle=True,random_state = 8)

#scaling
sc = StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.fit_transform(X_test)

#scaling
sc = StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.fit_transform(X_test)

X_train

print("X_train shape: {}".format(X_train.shape))
print("X_test shape: {}".format(X_test.shape))
print("y_train shape: {}".format(y_train.shape))
print("y_test shape: {}".format(y_test.shape))

#Fitting model
model=LinearRegression()
model.fit(X_train, y_train)

y_pred= model.predict(X_test)
pd.DataFrame({'test':y_test,'pred':y_pred}).head()

#3Evaluation
print(f"MAE: {mean_absolute_error(y_test, y_pred)}")
print(f" RMSE: {mean_squared_error(y_test, y_pred)}")

#Using trained model to make predictions
model.score(X_test,y_test)

#make and Visualize predictions
plt.scatter(y_test, y_pred)
plt.xlabel('Actual prices')
plt.ylabel('Predicted prices')
plt.show()



